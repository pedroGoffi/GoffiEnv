Tokens:
 ( ) [ ] { }
unary:

 + 
 - 
 ! 
 ~ 
 & 
 *
 
binary:
 +  
 |
 ^
 ?  
 :  
 << SHL
 >> SHR
 *  MULT
 /  DIV
 %  MOD
 &  ADDR_OF
 == EQ
 != NOT_EQ
 <  LT
 <= LTEQ
 >  GT
 >= GTEQ
 && AND
 || OR

  
Asign:
 =   SIMPLE_ASIGN
 :=  TYPE_ASIGN
 +=  ADD_ASIGN
 -=  SUB_ASIGN
 /=  DIV_ASIGN
 *=  MULT_ASING
 |=  OR_ASING
 ^=  XOR_ASING
 <<= SHL_ASIGN
 >>= SHR_ASIGN
 %=  MOD_ASIGN

Names/Literals:
 NAME  = [a-zA-Z_][a-zA-Z0-9)]*
 FLOAT = [0-9]*[.][0-9]*([eE][+-]?[0-9]+)?
 INT   = [1-9][0-9]* | 0[xX][0-9a-fA-F]+
 CHAR  = ' *!"[*| OPT:nrtvba] '
 STR   = " *!"[*] "

AST S-expression format:
  proc fact(n: int) -> int {
    if n == 0 return 1;
    return n * fact(n - 1);    
  }


//
type_list  	  = type ("," type)*
name_list  	  = NAME ("," NAME)*
base_type  	  = NAME
		  | "proc" "(" type_list? ")" ("->" type)?
		  | "(" type ")"
		  .
type   	   	  = base_type ("[" expr? "]" | "*")*
enum_item  	  = NAME ("=" expr)?
enum_items 	  = enum_item ("," enum_item)* ","?
enum_decl  	  = NAME "{" enum_items? "}"

aggregate_field   = name_list ":" type ";"
aggregate_Decl    = NAME ":" type ("=" expr)?
compiler_time_cte = NAME "::" VAL
var_Decl   	  = NAME "=" expr
		  | NAME ":" type "=" expr
		  .		  
const_Decl 	  = NAME "=" expr
typedef_Decl 	  = NAME "=" type
proc_param 	  = NAME ":" type
proc_params_list  = proc_param ("," proc_param)*
proc_Decl    = NAME "(" proc_params_list? ")" ":" type stmt_block
	     .
Decl   	     = "enum"   enumDcl
	     | "struct" aggregate_Decl
	     | "union"  aggregate_Decl
	     | "var"    var_Decl
	     | "const"  cosnt_Decl
	     | "typeof" typeof_Decl
	     | "proc"   proc_Decl
	     .
Statements:
assign_op    = '=' | TYPE_ASIGN | ADD_ASIGN | ...
switch_case  = ("case" expr | "default") ':' stmt*
switch_block = "{" switch_case* "}"

stmt   	     = "return" expr 
	     | "break"'      
	     | "continue"    
	     | "{" stmt* "}"
	     | "if" expr stmt_block ("elif" expr stmt_block)* (else stmt_block)*
	     | "while" expr stmt_list
	     | "for" expr; expr; expr stmt_list
	     | "do" stmt_block "while" expr
	     | "switch" expr switch_block
	     | expr (INC | DEC | assing_op expr)?
	     .
	     
typespec     = NAME | '(': type')'

expr_list : TODO define this lol
expr = INT
	     | FLOAT
	     | STRING
	     | NAME
	     | (typesepec)?'{' expr_list '}'
	     | CAST '(' ':' type ')' expr
	     | expr if expr (expr elif expr)*? (else expr)?
	     .

base_expr    = expr ('(' expr_List')' | '[' expr ']' | '.' NAME)*
unary_expr   = [+-~!&*] unary_expr
	     | base_expr
	     .
mul_op       = [*/%&] | LSHIFT | RSHIFT
mul_expr     = unary_expr (mul_op unary_expr)*
