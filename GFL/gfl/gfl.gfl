#incluir "std/cmd.gfl"
#incluir "gfl/utils.gfl"

OUT_PRINT_AST :: 1
debug :: 1

func programa_uso(stream: *FILE, program: const *char){
  fprintf(stream, "|| uso:\n");
  fprintf(stream, "|| ");
  fprintf(stream, program);
  fprintf(stream, "<SUB COMANDO> [OPÇÂO] <ARQUIVO>\n");
  fprintf(stream, "|| SUB COMANDOS:\n");
  fprintf(stream, "||\t-h       Printa esta tela de ajuda ao stdout\n");
  fprintf(stream, "||\t-o <out> usara <out> como um caminho de arquivo para gerar arquivo\n");
}
func main(argc: i64, argv: **char): i64
{
  var programa: const *char = cmd_proxima_flag(&argc, &argv);
  

  var compiler_mode: i64;
  var caminho_input: *char;
  var caminho_output: *char;
  enquanto *argv {
    var flag: *char    = cmd_proxima_flag(&argc, &argv);
    printf("Next flag: %s.\n", flag);
    se   streq(flag, "-h")  ou streq(flag, "--ajuda"){
      programa_uso(stdout, programa);
      retorne 0;      
    }
    ouse streq(flag, "-o")  ou streq(flag, "--saida") {
       se argc < 1 {
         programa_uso(stderr, programa);
	 printf("ERROR: esperado um caminho apos a flag [-o, --saida].\n");
	 retorne 1;
       }       
      caminho_output = cmd_proxima_flag(&argc, &argv);
    }
    ouse streq(flag, "--ast"){
      compiler_mode = OUT_PRINT_AST;
    }
    senao {
      caminho_input = flag;
    }
  }
  se debug {
    printf("input: ");
    printf(caminho_input);
    printf(" --> ");
    printf(caminho_output);
    printf("\nCompiler mode: ");

  }

}
