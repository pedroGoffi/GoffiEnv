#incluir "std/padrao.gfl"
// TODO: translate this
BLANK_CELL :: "-"
PLAYER_A   :: "X"
PLAYER_B   :: "O"
algoritmo sair(valor_saida: i64) = exit(valor_saida);
var A0: *char = BLANK_CELL;
var A1: *char = BLANK_CELL;
var A2: *char = BLANK_CELL;

var B0: *char = BLANK_CELL;
var B1: *char = BLANK_CELL;
var B2: *char = BLANK_CELL;

var C0: *char = BLANK_CELL;
var C1: *char = BLANK_CELL;
var C2: *char = BLANK_CELL;


algoritmo pegar_cell_item_por_str(str: *char): *char{
  se   streq(str, "a0") {&A0;}
  ouse streq(str, "a1") {&A1;}
  ouse streq(str, "a2") {&A2;}
  ouse streq(str, "b0") {&B0;}
  ouse streq(str, "b1") {&B1;}
  ouse streq(str, "b2") {&B2;} 
  ouse streq(str, "c0") {&C0;}
  ouse streq(str, "c1") {&C1;}
  ouse streq(str, "c2") {&C2;}
  senao {
    escreva("ERROR: could not get the cell: str='");
    escreva(str);
    escreva("'\n");
    exit(1);
  }
}

algoritmo escreva_x(row: i64): i64 {
  se row == 0 { // First row
     escreva(A0);
     escreva(" ");
     escreva(A1);
     escreva(" ");
     escreva(A2);
     escreva("\n");     
  }
  ouse row == 1 {
     escreva(B0);
     escreva(" ");
     escreva(B1);
     escreva(" ");
     escreva(B2);
     escreva("\n");     
  }
  ouse row == 2 {
     escreva(C0);
     escreva(" ");
     escreva(C1);
     escreva(" ");
     escreva(C2);
     escreva("\n");     
  }
  senao {
    escreva("ERROR: could not escreva_x.\n");
    exit(1);
  }
}
algoritmo escreva_y(ypos: i64) {
  se ypos == 0 {
    escreva("A | ");
    escreva_x(0);
  } ouse ypos == 1 {
    escreva("B | ");
    escreva_x(1);
  } ouse ypos == 2 {
    escreva("C | ");
    escreva_x(2);
  }
} 
algoritmo print_table(): void {
  escreva("    0 : 1 : 2\n");
  escreva("  +-----------\n");
  var pos: i64 = 0;
  enquanto pos <= 3 {
    escreva_y(pos);
    pos += 1;    
  }
  
}
algoritmo existe_ganhador(){}
algoritmo mostrar_ganhador(ganhador_str: *char){
  escreva("O ganhador foi: ");
  escreva(ganhador_str);
  escreva("!!!\n");
}
algoritmo main(): void {
  var player:  *char = PLAYER_A ;
  var row_str: *char = 0 como *char;
  var row_ptr: *i64  = 0 como *i64;
  enquanto verdadeiro {
     var turno_jogador_a: _i64 = streq(player, PLAYER_A); 
     print_table();
     row_str = entrar("Select the row to play: ");
     se streq(row_str, "parar"){
       parar;
     }

     row_ptr = pegar_cell_item_por_str(row_str);

     *row_ptr = PLAYER_A se turno_jogador_a senao PLAYER_B;
     player   = PLAYER_B se turno_jogador_a senao PLAYER_A;


     se existe_ganhador(){parar;} 
  }
  mostrar_ganhador(("Player A" se streq(player, PLAYER_A) senao "Player B") como *char);
}
