// NOTE: INIT_MAX_STR is a 258 array
tipodata string     :: *_char
__MAX_W_SIZE__ :: 256
__INIT_MAX_STR__    :: "                                                                                                                                                                                                                                                                  "

algoritmo strlen(str: *char): i64{
  var len:    i64 = 0;

  var iter: *char = str;
  enquanto *iter{
    len  += 1;
    iter += 1;
  }
  retorne len;  
}

algoritmo streq(a: *char, b: *char): i64{
  var str1: *char = a;
  var str2: *char = b;
  var s1: i64 = strlen(str1);
  var s2: i64 = strlen(str2);
  
  se ( s1 != s2 ) {retorne falso;}
  
  // Loop each character and se they are not equal retorne falso
  enquanto 0 < *str1 {
    se *str1 != *str2 {retorne falso;}
    str1 = str1 + 1 como *char;
    str2 = str2 + 1 como *char;    
  }
  retorne verdadeiro;
}






algoritmo stoi(str: *char): i64{
  var str_begin: *char = str;
  se *str_begin == 0{
    escreva("ERROR: can not convert string to integer, got NULL string.\n");
    SYSCALL1(1, 60);
  }
  var result: i64 = 0;
  enquanto 0 < *str_begin {
    var digit: i64 = *str_begin - '0';
    result	= result * 10;
    result	= result + digit;    
    str_begin	= (:*char)(str_begin + 1);    
  }
  retorne result; 
}

algoritmo strcat(a: *char, b:*char): *char {
  var res:  *char	= __INIT_MAX_STR__;
  var iter: *char	= res;
  var asz:  i64		= strlen(a);
  var bsz:  i64		= strlen(b);
  
  enquanto 0 < asz {
    *iter = *a;
    iter = (:*char)(iter + 1);
    a   = (:*char)(a + 1);
    asz = asz - 1;
  }
  enquanto 0 < bsz {
    *iter = *b;
    iter = (:*char)(iter + 1);
    b   = (:*char)(b + 1);
    bsz = bsz - 1;
  }    
  retorne res;
}

algoritmo is_numeric(chr: i64): bool {
  retorne ('0' <= chr <= '9') como bool;
}

algoritmo is_alpha(chr: i64): bool {
  retorne ('a' <= chr <= 'z' ou 'A' <= chr <= 'Z') como bool;
}

