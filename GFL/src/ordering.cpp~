#ifndef __order__
#define __order__
#include "./ast.cpp"
typedef struct Sym Sym;
typedef struct Entity Entity;;
typedef struct VarEntity VarEntity;
void order_expr(Expr* e);
void order_dec_var(Decl* decl);
void order_decl_proc(Decl* decl);
void order_decl_struct(Decl* agg);
void order_typedef(Decl* td);
void order_name(const char* name);
void order_type(Type* tf);

const char* const __builtin_types__[] = {
  "u8", "u16", "u32", "u64",
  "i8", "i16", "i32", "i64",
  "f8", "f16", "f32", "f64",

};
Decl** ordered_decls = NULL;

enum SymState{
  UNORDERED,
  ORDERING,
  ORDERED
};
struct Sym{
  const char *name;
  Decl       *decl;
  SymState    state;

};
Sym* sym_list;
Sym* sym_get(const char* name){
  for(Sym* it=sym_list; it != buf__end(sym_list); ++it){
    if(it->name == name)
      return it;
  }
  return nullptr;
}
void sym_push(Decl* decl){
  assert(decl->name);
  assert(!sym_get(decl->name));
  Sym pushable = {
    .name   = decl->name,
    .decl   = decl,
    .state  = SymState::UNORDERED
  };
  buf__push(sym_list, pushable);
}
void order_type(Type* type){
  switch(type->kind){
  case TYPE_I64:
  case TYPE_F64:
   
    //order_name(type->name);
    break;
  case TYPE_ARRAY:
    order_type(type->array.base);
    if(type->array.size)
      order_expr(type->array.size);
    break;
  case TYPE_PTR:
    // NOTE: ptr is not ordered for now
    break;
  default:
    fprintf(stderr,
	    "ERROR: unhandled type kind at order_typefield.\n");
    exit(1);
  }
}
void order_decl_var(Decl* decl){
  // TODO :order_type_field(var->type_field);
  order_type(decl->as.varDecl.type_field->type);
  if(decl->as.varDecl.expr)
    order_expr(decl->as.varDecl.expr);
}
void order_decl_struct(Decl* st){
  assert(st->kind == DeclKind::DECL_STRUCT);
  printf("NOTE: structs may change in the future, hence will not type check at the present moment.\n");
  exit(1);
}
void order_expr(Expr* e){
  switch(e->kind){
  case EXPRKIND_INT:
  case EXPRKIND_FLOAT:
  case EXPRKIND_STRING_LITERAL:
    // Do nothing
    break;
  case EXPRKIND_NAME:
    order_name(e->name);
    break;
  case EXPRKIND_CAST:
    // TODO: order typespec
    order_expr(e->as.Cast.expr);
    break;
  case EXPRKIND_PROC_CALL: {
    for(size_t i=0; i < e->as.Call.args_size; ++i){
      order_expr(e->as.Call.args[i]);
    }
  } break;
  case EXPR_BINARY_OP:
    order_expr(e->as.BinaryOp.lhs);
    order_expr(e->as.BinaryOp.rhs);    
    break;
  case EXPRKIND_NONE:
    return;
  case EXPRKIND_DERREF_NAME: 
  case EXPRKIND_ADDROF_NAME: 
  case EXPRKIND_REASIGN: 
  case EXPRKIND_FIELD_ACCESS: 
  case EXPRKIND_ARRAY_ACCESS: 
  default:
    fprintf(stderr,
	    "ERROR: unhandled expr kind at order_expr.\n");
    exit(1);
  }
}
void order_decl(Decl* decl){
  switch(decl->kind){
  case DeclKind::DECL_VAR:
    order_decl_var(decl);
    break;
  case DeclKind::DECL_PROC:
    printf("TODO: DeclKind::DECL_PROC");
    //order_decl_proc(decl);
    break;
  case DeclKind::DECL_UNION:
  case DeclKind::DECL_ENUM:
  case DeclKind::DECL_STRUCT:   
    order_decl_struct(decl);
    break;
  case DeclKind::DECL_TYPEDEF:
    //order_typedef(decl);
    break;
  case DeclKind::DECL_CIMPORT:
  case DeclKind::DECL_NONE:
  default:
    fprintf(stderr,
	    "ERROR: undefined kidn at void order_decl(Decl* decl).\n");
    exit(1);
  }  
}
void order_sym(Sym* sym){
  if(sym->state == SymState::ORDERED) return;
  if(sym->state == SymState::ORDERING) {
    fprintf(stderr,
	    "ERROR: Cyclic dependency.\n");
    exit(1);
  }
  sym->state = SymState::ORDERING;
  order_decl(sym->decl);
  sym->state = SymState::ORDERED;
  buf__push(ordered_decls, sym->decl);
}
void order_name(const char* name){
  Sym* sym = sym_get(name);

  if(!sym){
    fprintf(stderr,
	    "ERROR: the name '%s' was not declared in this scope.\n", name);
    exit(1);
  }
  if(sym->state == SymState::ORDERED) return;
  if(sym->state == SymState::ORDERING){
    fprintf(stderr,
	    "ERROR: Cyclic dependency.\n");
    exit(1);
  }
  sym->state = SymState::ORDERING;
  order_decl(sym->decl);
  sym->state = SymState::ORDERED;
  buf__push(ordered_decls, sym->decl);
}
void order_sym_list(){
  for(Sym* it = sym_list; it != buf__end(sym_list); ++it){
    order_sym(it);
  }
}

void init_builtin_types(){
  for(const char* const type_name: __builtin_types__){    
    assert(!sym_get(type_name));
    Sym type = {
      .name  = type_name,
      .decl  = {},
      .state = SymState::ORDERED
    };
    buf__push(sym_list, type);
  }
}
Decl** order_ast(Decl** ast){
  // TODO: order ast is not fully implemented
  init_builtin_types();
  for(size_t i=0; i < buf__len(ast); i++){
    sym_push(ast[i]);
  }
  order_sym_list();  
 
  return ordered_decls;
}
void order_test(){
  assert(sym_get("foo") == NULL);
  Decl* cte = decl_var("foo",
		       type_int(),
		       expr_int(420));
  sym_push(cte);  
  assert(sym_get("foo")->decl == cte);
  TEST_OK;    
}

#endif /* __order__ */
