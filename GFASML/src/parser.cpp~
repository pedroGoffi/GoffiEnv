#ifndef   GFASM_PARSER
#define   GFASM_PARSER
#include <iostream>
#include <map>
#include "./ast.cpp"
#include "./lexer.cpp"
struct Local_var{
  const char* name;
  size_t      size;
};
Local_var** local_vars = NULL;
Local_var* parse_local_var(){
  Local_var* local = new Local_var;
  assert(token.kind == TOKEN_NAME);
  next_token();
  local->name = consume().name;
  local->size = consume().INT;
  // parse macros
  MustExpectName("end");
  return local;
}
Instruction* parse_instruction(){
  Instruction* ins = new Instruction;
  if     (expect_name("dup")){
    ins->kind = DUP;    
  }
  else if(token_is_name("swap")){
    ins->kind = SWAP;
  } 
  else {
    printf("ERROR: unknown instruction %s.\n",
	   token.name);
    exit(1);
  }

  return ins;
}
Block* parse_do_block(){
  Block* b = new Block;
  Instruction** body = NULL;
  // dup swap over rot drop not or and load
  MustExpectName("do");
  while(*stream && !token_is_name("end")){
    if(token_is_name("local")){
      Local_var* local_var = parse_local_var();
      buf__push(local_vars, local_var);
    }
    else {
      buf__push(body, parse_instruction());
      MustExpect(TOKEN_DOT_AND_COMMA);
    }

  }
  b->body = body;
  b->size = buf__len(body);
  MustExpectName("end");
  return b;
}
Proc* parse_proc(){
  Proc* p = new Proc;
  MustExpectName("proc");
  p->name = consume().name;
  p->local_offset = 0;
  if(!token_is_name("do")){
    printf("ERROR: expected `do` after proc definition.\n");
    exit(1);
  }
  p->body = parse_do_block();
  size_t local_offset = 0;
  for(size_t i=0; i<buf__len(local_vars); ++i){
    local_offset += local_vars[i]->size;
  }
  p->local_offset = local_offset;
  return p;
}
AST_NODE parse_next(){
  AST_NODE root = new AST_T;
  if(token_is_name("proc")){
    root->kind = ast_proc;
    root->proc = parse_proc();
    buf__free(local_vars);
  }
  else{
    printf("ERROR: unexpected global token.\n");
    exit(1);
  }  
  return root;
}
AST_ROOT parse_module(){ 
  AST_ROOT mod = NULL;
  while(*stream){
    buf__push(mod, parse_next());
  }
  return mod;
}
#endif /* GFASM_PARSER */
