#ifndef compiler
#define compiler
#include "./ast.cpp"
#include <cassert>
FILE* fd = stderr;
#define writef(...) fprintf(fd, __VA_ARGS__);
#define writefl(...) writef(__VA_ARGS__); writef("\n");
void compile_root(AST_ROOT root, const char* file_path){
  //fd = fopen(file_path, "wb");
  //assert(fd);
  for(size_t node_index=0; node_index<buf__len(root); ++node_index){
    AST_NODE node = root[node_index];
    switch(node->kind){
    case ast_proc:
      writefl("%s:", node->proc->name);
      writefl("push rbp");
      writefl("mov rbp, rsp");
      if(node->proc->local_offset>0) writefl("sub rsp, %zu", node->proc->local_offset);
      
      // TODO: the procedure body
      //compile_body();
      writefl("mov eax, 0");
      writefl("leave");
      writefl("ret");
      break;
    default:
      fprintf(stderr,
	      "ERROR: unexpected compiler_node kind.\n");
      exit(1);
    }
  }
}
#endif /* compiler */
