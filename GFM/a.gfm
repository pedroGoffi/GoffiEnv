BITS 64
%define MACHINE_WORD_SIZE 8
segment .text
global _start
print_i64:
	mov rsi, [stack_top]
	sub rsi, MACHINE_WORD_SIZE
	mov rax, [rsi]
	mov [stack_top], rsi
	mov rdi, 0
	dec rsp
	inc rdi
	mov BYTE [rsp], 10
.print_i64_loop:
	xor rdx, rdx
	mov rbx, 10
	div rbx
	add rdx, '0'
	dec rsp
	inc rdi
	mov [rsp], dl
	cmp rax, 0
	jne .print_i64_loop
	mov rbx, rdi
	mov rax, 1
	mov rdi, 1
	mov rsi, rsp
	mov rdx, rbx
	syscall
	add rsp, rbx
	ret
_start:
L0:
	 ;; [0]: jmp
	;; TODO: jmp L1
L1:
	 ;; [1]: push
	mov rsi, [stack_top]
	mov QWORD [rsi], 0
	add QWORD [stack_top], MACHINE_WORD_SIZE
L2:
	 ;; [2]: push
	mov rsi, [stack_top]
	mov QWORD [rsi], 1
	add QWORD [stack_top], MACHINE_WORD_SIZE
L3:
	 ;; [3]: dup
	mov rsi, [stack_top]
	mov rdi, rsi
	sub rdi, MACHINE_WORD_SIZE * (0 + 1)
	mov rax, [rdi]
	mov [rsi], rax
	add rsi, MACHINE_WORD_SIZE
	mov [stack_top], rsi
L4:
	 ;; [4]: native
	call print_i64
L5:
	 ;; [5]: dup
	mov rsi, [stack_top]
	mov rdi, rsi
	sub rdi, MACHINE_WORD_SIZE * (1 + 1)
	mov rax, [rdi]
	mov [rsi], rax
	add rsi, MACHINE_WORD_SIZE
	mov [stack_top], rsi
L6:
	 ;; [6]: dup
	mov rsi, [stack_top]
	mov rdi, rsi
	sub rdi, MACHINE_WORD_SIZE * (1 + 1)
	mov rax, [rdi]
	mov [rsi], rax
	add rsi, MACHINE_WORD_SIZE
	mov [stack_top], rsi
L7:
	 ;; [7]: addi
	mov rsi, [stack_top]
	sub rsi, MACHINE_WORD_SIZE
	mov rbx, [rsi]
	sub rsi, MACHINE_WORD_SIZE
	mov rax, [rsi]
	add rax, rbx
	mov [rsi], rax
	add rsi, MACHINE_WORD_SIZE
	mov [stack_top], rsi
L8:
	 ;; [8]: dup
	mov rsi, [stack_top]
	mov rdi, rsi
	sub rdi, MACHINE_WORD_SIZE * (0 + 1)
	mov rax, [rdi]
	mov [rsi], rax
	add rsi, MACHINE_WORD_SIZE
	mov [stack_top], rsi
L9:
	 ;; [9]: push
	mov rsi, [stack_top]
	mov QWORD [rsi], 30
	add QWORD [stack_top], MACHINE_WORD_SIZE
L10:
	 ;; [10]: cmp
	mov rsi, [stack_top]
	sub rsi, MACHINE_WORD_SIZE
	mov rbx, [rsi]
	sub rsi, MACHINE_WORD_SIZE
	mov rax, [rsi]
	mov rdx, 0
	cmp rax, rbx
	jge JIE10
	mov rdx, 1
JIE10:
	mov QWORD [rsi], rdx
L11:
	 ;; [11]: jmp_if
	mov rsi, [stack_top]
	sub rsi, MACHINE_WORD_SIZE
	mov rax, [rsi]
	mov rdi, inst_map
	add rdi, MACHINE_WORD_SIZE * (3)
	cmp rax, 0
	je  JIE11
	jmp [rdi]
	JIE11:
L12:
	 ;; [12]: halt
	mov rax, 60
	mov rdi, 0
	syscall
segment .data
stack_top: dq stack
inst_map: dq L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12,
segment .bss
stack: resq 1024
